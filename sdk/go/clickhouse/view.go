// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package clickhouse

import (
	"context"
	"reflect"

	"errors"
	"github.com/Triple-Whale/pulumi-clickhouse/sdk/go/clickhouse/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type View struct {
	pulumi.CustomResourceState

	// Cluster Name
	Cluster pulumi.StringPtrOutput `pulumi:"cluster"`
	// View comment, it will be codified in a json along with come metadata information (like cluster name in case of
	// clustering)
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// DB Name where the view will bellow
	Database pulumi.StringOutput `pulumi:"database"`
	// Is materialized view
	Materialized pulumi.BoolPtrOutput `pulumi:"materialized"`
	// View Name
	Name pulumi.StringOutput `pulumi:"name"`
	// View query
	Query pulumi.StringOutput `pulumi:"query"`
	// For materialized view - destination table
	ToTable pulumi.StringPtrOutput `pulumi:"toTable"`
}

// NewView registers a new resource with the given unique name, arguments, and options.
func NewView(ctx *pulumi.Context,
	name string, args *ViewArgs, opts ...pulumi.ResourceOption) (*View, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Database == nil {
		return nil, errors.New("invalid value for required argument 'Database'")
	}
	if args.Query == nil {
		return nil, errors.New("invalid value for required argument 'Query'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource View
	err := ctx.RegisterResource("clickhouse:index/view:View", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetView gets an existing View resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetView(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ViewState, opts ...pulumi.ResourceOption) (*View, error) {
	var resource View
	err := ctx.ReadResource("clickhouse:index/view:View", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering View resources.
type viewState struct {
	// Cluster Name
	Cluster *string `pulumi:"cluster"`
	// View comment, it will be codified in a json along with come metadata information (like cluster name in case of
	// clustering)
	Comment *string `pulumi:"comment"`
	// DB Name where the view will bellow
	Database *string `pulumi:"database"`
	// Is materialized view
	Materialized *bool `pulumi:"materialized"`
	// View Name
	Name *string `pulumi:"name"`
	// View query
	Query *string `pulumi:"query"`
	// For materialized view - destination table
	ToTable *string `pulumi:"toTable"`
}

type ViewState struct {
	// Cluster Name
	Cluster pulumi.StringPtrInput
	// View comment, it will be codified in a json along with come metadata information (like cluster name in case of
	// clustering)
	Comment pulumi.StringPtrInput
	// DB Name where the view will bellow
	Database pulumi.StringPtrInput
	// Is materialized view
	Materialized pulumi.BoolPtrInput
	// View Name
	Name pulumi.StringPtrInput
	// View query
	Query pulumi.StringPtrInput
	// For materialized view - destination table
	ToTable pulumi.StringPtrInput
}

func (ViewState) ElementType() reflect.Type {
	return reflect.TypeOf((*viewState)(nil)).Elem()
}

type viewArgs struct {
	// Cluster Name
	Cluster *string `pulumi:"cluster"`
	// View comment, it will be codified in a json along with come metadata information (like cluster name in case of
	// clustering)
	Comment *string `pulumi:"comment"`
	// DB Name where the view will bellow
	Database string `pulumi:"database"`
	// Is materialized view
	Materialized *bool `pulumi:"materialized"`
	// View Name
	Name *string `pulumi:"name"`
	// View query
	Query string `pulumi:"query"`
	// For materialized view - destination table
	ToTable *string `pulumi:"toTable"`
}

// The set of arguments for constructing a View resource.
type ViewArgs struct {
	// Cluster Name
	Cluster pulumi.StringPtrInput
	// View comment, it will be codified in a json along with come metadata information (like cluster name in case of
	// clustering)
	Comment pulumi.StringPtrInput
	// DB Name where the view will bellow
	Database pulumi.StringInput
	// Is materialized view
	Materialized pulumi.BoolPtrInput
	// View Name
	Name pulumi.StringPtrInput
	// View query
	Query pulumi.StringInput
	// For materialized view - destination table
	ToTable pulumi.StringPtrInput
}

func (ViewArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*viewArgs)(nil)).Elem()
}

type ViewInput interface {
	pulumi.Input

	ToViewOutput() ViewOutput
	ToViewOutputWithContext(ctx context.Context) ViewOutput
}

func (*View) ElementType() reflect.Type {
	return reflect.TypeOf((**View)(nil)).Elem()
}

func (i *View) ToViewOutput() ViewOutput {
	return i.ToViewOutputWithContext(context.Background())
}

func (i *View) ToViewOutputWithContext(ctx context.Context) ViewOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ViewOutput)
}

// ViewArrayInput is an input type that accepts ViewArray and ViewArrayOutput values.
// You can construct a concrete instance of `ViewArrayInput` via:
//
//	ViewArray{ ViewArgs{...} }
type ViewArrayInput interface {
	pulumi.Input

	ToViewArrayOutput() ViewArrayOutput
	ToViewArrayOutputWithContext(context.Context) ViewArrayOutput
}

type ViewArray []ViewInput

func (ViewArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*View)(nil)).Elem()
}

func (i ViewArray) ToViewArrayOutput() ViewArrayOutput {
	return i.ToViewArrayOutputWithContext(context.Background())
}

func (i ViewArray) ToViewArrayOutputWithContext(ctx context.Context) ViewArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ViewArrayOutput)
}

// ViewMapInput is an input type that accepts ViewMap and ViewMapOutput values.
// You can construct a concrete instance of `ViewMapInput` via:
//
//	ViewMap{ "key": ViewArgs{...} }
type ViewMapInput interface {
	pulumi.Input

	ToViewMapOutput() ViewMapOutput
	ToViewMapOutputWithContext(context.Context) ViewMapOutput
}

type ViewMap map[string]ViewInput

func (ViewMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*View)(nil)).Elem()
}

func (i ViewMap) ToViewMapOutput() ViewMapOutput {
	return i.ToViewMapOutputWithContext(context.Background())
}

func (i ViewMap) ToViewMapOutputWithContext(ctx context.Context) ViewMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ViewMapOutput)
}

type ViewOutput struct{ *pulumi.OutputState }

func (ViewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**View)(nil)).Elem()
}

func (o ViewOutput) ToViewOutput() ViewOutput {
	return o
}

func (o ViewOutput) ToViewOutputWithContext(ctx context.Context) ViewOutput {
	return o
}

// Cluster Name
func (o ViewOutput) Cluster() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *View) pulumi.StringPtrOutput { return v.Cluster }).(pulumi.StringPtrOutput)
}

// View comment, it will be codified in a json along with come metadata information (like cluster name in case of
// clustering)
func (o ViewOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *View) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// DB Name where the view will bellow
func (o ViewOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v *View) pulumi.StringOutput { return v.Database }).(pulumi.StringOutput)
}

// Is materialized view
func (o ViewOutput) Materialized() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *View) pulumi.BoolPtrOutput { return v.Materialized }).(pulumi.BoolPtrOutput)
}

// View Name
func (o ViewOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *View) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// View query
func (o ViewOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v *View) pulumi.StringOutput { return v.Query }).(pulumi.StringOutput)
}

// For materialized view - destination table
func (o ViewOutput) ToTable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *View) pulumi.StringPtrOutput { return v.ToTable }).(pulumi.StringPtrOutput)
}

type ViewArrayOutput struct{ *pulumi.OutputState }

func (ViewArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*View)(nil)).Elem()
}

func (o ViewArrayOutput) ToViewArrayOutput() ViewArrayOutput {
	return o
}

func (o ViewArrayOutput) ToViewArrayOutputWithContext(ctx context.Context) ViewArrayOutput {
	return o
}

func (o ViewArrayOutput) Index(i pulumi.IntInput) ViewOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *View {
		return vs[0].([]*View)[vs[1].(int)]
	}).(ViewOutput)
}

type ViewMapOutput struct{ *pulumi.OutputState }

func (ViewMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*View)(nil)).Elem()
}

func (o ViewMapOutput) ToViewMapOutput() ViewMapOutput {
	return o
}

func (o ViewMapOutput) ToViewMapOutputWithContext(ctx context.Context) ViewMapOutput {
	return o
}

func (o ViewMapOutput) MapIndex(k pulumi.StringInput) ViewOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *View {
		return vs[0].(map[string]*View)[vs[1].(string)]
	}).(ViewOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ViewInput)(nil)).Elem(), &View{})
	pulumi.RegisterInputType(reflect.TypeOf((*ViewArrayInput)(nil)).Elem(), ViewArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ViewMapInput)(nil)).Elem(), ViewMap{})
	pulumi.RegisterOutputType(ViewOutput{})
	pulumi.RegisterOutputType(ViewArrayOutput{})
	pulumi.RegisterOutputType(ViewMapOutput{})
}
