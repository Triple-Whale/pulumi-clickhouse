# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'TableColumnArgs',
    'TableIndexArgs',
    'TablePartitionByArgs',
]

@pulumi.input_type
class TableColumnArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 type: pulumi.Input[str],
                 comment: Optional[pulumi.Input[str]] = None,
                 default_expression: Optional[pulumi.Input[str]] = None,
                 default_kind: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Column Name
        :param pulumi.Input[str] type: Column Type
        :param pulumi.Input[str] comment: Database comment, it will be codified in a json along with come metadata information (like cluster name in case of clustering)
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if default_expression is not None:
            pulumi.set(__self__, "default_expression", default_expression)
        if default_kind is not None:
            pulumi.set(__self__, "default_kind", default_kind)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Column Name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Column Type
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Database comment, it will be codified in a json along with come metadata information (like cluster name in case of clustering)
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="defaultExpression")
    def default_expression(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_expression")

    @default_expression.setter
    def default_expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_expression", value)

    @property
    @pulumi.getter(name="defaultKind")
    def default_kind(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_kind")

    @default_kind.setter
    def default_kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_kind", value)


@pulumi.input_type
class TableIndexArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 name: pulumi.Input[str],
                 type: pulumi.Input[str],
                 granularity: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] name: Column Name
        :param pulumi.Input[str] type: Column Type
        """
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if granularity is not None:
            pulumi.set(__self__, "granularity", granularity)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Column Name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Column Type
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def granularity(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "granularity")

    @granularity.setter
    def granularity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "granularity", value)


@pulumi.input_type
class TablePartitionByArgs:
    def __init__(__self__, *,
                 by: pulumi.Input[str],
                 mod: Optional[pulumi.Input[str]] = None,
                 partition_function: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] by: Column to use as part of the partition key
        :param pulumi.Input[str] partition_function: Partition function, could be empty or one of following: toYYYYMM, toYYYYMMDD or toYYYYMMDDhhmmss
        """
        pulumi.set(__self__, "by", by)
        if mod is not None:
            pulumi.set(__self__, "mod", mod)
        if partition_function is not None:
            pulumi.set(__self__, "partition_function", partition_function)

    @property
    @pulumi.getter
    def by(self) -> pulumi.Input[str]:
        """
        Column to use as part of the partition key
        """
        return pulumi.get(self, "by")

    @by.setter
    def by(self, value: pulumi.Input[str]):
        pulumi.set(self, "by", value)

    @property
    @pulumi.getter
    def mod(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mod")

    @mod.setter
    def mod(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mod", value)

    @property
    @pulumi.getter(name="partitionFunction")
    def partition_function(self) -> Optional[pulumi.Input[str]]:
        """
        Partition function, could be empty or one of following: toYYYYMM, toYYYYMMDD or toYYYYMMDDhhmmss
        """
        return pulumi.get(self, "partition_function")

    @partition_function.setter
    def partition_function(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "partition_function", value)


