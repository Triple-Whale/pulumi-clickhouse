# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'TableColumn',
    'TableIndex',
    'GetDbsDbResult',
]

@pulumi.output_type
class TableColumn(dict):
    def __init__(__self__, *,
                 name: str,
                 type: str,
                 comment: Optional[str] = None):
        """
        :param str name: Column Name
        :param str type: Column Type
        :param str comment: Database comment, it will be codified in a json along with come metadata information (like cluster name in case of clustering)
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Column Name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Column Type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        """
        Database comment, it will be codified in a json along with come metadata information (like cluster name in case of clustering)
        """
        return pulumi.get(self, "comment")


@pulumi.output_type
class TableIndex(dict):
    def __init__(__self__, *,
                 expression: str,
                 name: str,
                 type: str,
                 granularity: Optional[int] = None):
        """
        :param str name: Column Name
        :param str type: Column Type
        """
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if granularity is not None:
            pulumi.set(__self__, "granularity", granularity)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Column Name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Column Type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def granularity(self) -> Optional[int]:
        return pulumi.get(self, "granularity")


@pulumi.output_type
class GetDbsDbResult(dict):
    def __init__(__self__, *,
                 comment: str,
                 data_path: str,
                 engine: str,
                 metadata_path: str,
                 name: str,
                 uuid: str):
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "data_path", data_path)
        pulumi.set(__self__, "engine", engine)
        pulumi.set(__self__, "metadata_path", metadata_path)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def comment(self) -> str:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="dataPath")
    def data_path(self) -> str:
        return pulumi.get(self, "data_path")

    @property
    @pulumi.getter
    def engine(self) -> str:
        return pulumi.get(self, "engine")

    @property
    @pulumi.getter(name="metadataPath")
    def metadata_path(self) -> str:
        return pulumi.get(self, "metadata_path")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        return pulumi.get(self, "uuid")


