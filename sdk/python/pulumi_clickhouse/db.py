# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['DbArgs', 'Db']

@pulumi.input_type
class DbArgs:
    def __init__(__self__, *,
                 cluster: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Db resource.
        :param pulumi.Input[str] cluster: Cluster name, not mandatory but should be provided if creating a db in a clustered server
        :param pulumi.Input[str] comment: Comment about the database
        :param pulumi.Input[str] name: Database name
        """
        if cluster is not None:
            pulumi.set(__self__, "cluster", cluster)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def cluster(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster name, not mandatory but should be provided if creating a db in a clustered server
        """
        return pulumi.get(self, "cluster")

    @cluster.setter
    def cluster(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Comment about the database
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Database name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _DbState:
    def __init__(__self__, *,
                 cluster: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 data_path: Optional[pulumi.Input[str]] = None,
                 engine: Optional[pulumi.Input[str]] = None,
                 metadata_path: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Db resources.
        :param pulumi.Input[str] cluster: Cluster name, not mandatory but should be provided if creating a db in a clustered server
        :param pulumi.Input[str] comment: Comment about the database
        :param pulumi.Input[str] data_path: Database internal path
        :param pulumi.Input[str] engine: Database engine
        :param pulumi.Input[str] metadata_path: Database internal metadata path
        :param pulumi.Input[str] name: Database name
        :param pulumi.Input[str] uuid: Database UUID
        """
        if cluster is not None:
            pulumi.set(__self__, "cluster", cluster)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if data_path is not None:
            pulumi.set(__self__, "data_path", data_path)
        if engine is not None:
            pulumi.set(__self__, "engine", engine)
        if metadata_path is not None:
            pulumi.set(__self__, "metadata_path", metadata_path)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def cluster(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster name, not mandatory but should be provided if creating a db in a clustered server
        """
        return pulumi.get(self, "cluster")

    @cluster.setter
    def cluster(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Comment about the database
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="dataPath")
    def data_path(self) -> Optional[pulumi.Input[str]]:
        """
        Database internal path
        """
        return pulumi.get(self, "data_path")

    @data_path.setter
    def data_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_path", value)

    @property
    @pulumi.getter
    def engine(self) -> Optional[pulumi.Input[str]]:
        """
        Database engine
        """
        return pulumi.get(self, "engine")

    @engine.setter
    def engine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "engine", value)

    @property
    @pulumi.getter(name="metadataPath")
    def metadata_path(self) -> Optional[pulumi.Input[str]]:
        """
        Database internal metadata path
        """
        return pulumi.get(self, "metadata_path")

    @metadata_path.setter
    def metadata_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metadata_path", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Database name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        Database UUID
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


class Db(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Resource to handle clickhouse databases.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster: Cluster name, not mandatory but should be provided if creating a db in a clustered server
        :param pulumi.Input[str] comment: Comment about the database
        :param pulumi.Input[str] name: Database name
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[DbArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource to handle clickhouse databases.

        :param str resource_name: The name of the resource.
        :param DbArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DbArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DbArgs.__new__(DbArgs)

            __props__.__dict__["cluster"] = cluster
            __props__.__dict__["comment"] = comment
            __props__.__dict__["name"] = name
            __props__.__dict__["data_path"] = None
            __props__.__dict__["engine"] = None
            __props__.__dict__["metadata_path"] = None
            __props__.__dict__["uuid"] = None
        super(Db, __self__).__init__(
            'clickhouse:index/db:Db',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster: Optional[pulumi.Input[str]] = None,
            comment: Optional[pulumi.Input[str]] = None,
            data_path: Optional[pulumi.Input[str]] = None,
            engine: Optional[pulumi.Input[str]] = None,
            metadata_path: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            uuid: Optional[pulumi.Input[str]] = None) -> 'Db':
        """
        Get an existing Db resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster: Cluster name, not mandatory but should be provided if creating a db in a clustered server
        :param pulumi.Input[str] comment: Comment about the database
        :param pulumi.Input[str] data_path: Database internal path
        :param pulumi.Input[str] engine: Database engine
        :param pulumi.Input[str] metadata_path: Database internal metadata path
        :param pulumi.Input[str] name: Database name
        :param pulumi.Input[str] uuid: Database UUID
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DbState.__new__(_DbState)

        __props__.__dict__["cluster"] = cluster
        __props__.__dict__["comment"] = comment
        __props__.__dict__["data_path"] = data_path
        __props__.__dict__["engine"] = engine
        __props__.__dict__["metadata_path"] = metadata_path
        __props__.__dict__["name"] = name
        __props__.__dict__["uuid"] = uuid
        return Db(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def cluster(self) -> pulumi.Output[Optional[str]]:
        """
        Cluster name, not mandatory but should be provided if creating a db in a clustered server
        """
        return pulumi.get(self, "cluster")

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        """
        Comment about the database
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="dataPath")
    def data_path(self) -> pulumi.Output[str]:
        """
        Database internal path
        """
        return pulumi.get(self, "data_path")

    @property
    @pulumi.getter
    def engine(self) -> pulumi.Output[str]:
        """
        Database engine
        """
        return pulumi.get(self, "engine")

    @property
    @pulumi.getter(name="metadataPath")
    def metadata_path(self) -> pulumi.Output[str]:
        """
        Database internal metadata path
        """
        return pulumi.get(self, "metadata_path")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Database name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Output[str]:
        """
        Database UUID
        """
        return pulumi.get(self, "uuid")

