// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Clickhouse
{
    /// <summary>
    /// Resource to manage tables
    /// </summary>
    [ClickhouseResourceType("clickhouse:index/table:Table")]
    public partial class Table : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Cluster Name, it is required for Replicated or Distributed tables and forbidden in other case
        /// </summary>
        [Output("cluster")]
        public Output<string?> Cluster { get; private set; } = null!;

        /// <summary>
        /// Column
        /// </summary>
        [Output("columns")]
        public Output<ImmutableArray<Outputs.TableColumn>> Columns { get; private set; } = null!;

        /// <summary>
        /// Database comment, it will be codified in a json along with come metadata information (like cluster name in case of clustering)
        /// </summary>
        [Output("comment")]
        public Output<string?> Comment { get; private set; } = null!;

        /// <summary>
        /// DB Name where the table will bellow
        /// </summary>
        [Output("database")]
        public Output<string> Database { get; private set; } = null!;

        /// <summary>
        /// Table engine type (Supported types so far: Distributed, ReplicatedReplacingMergeTree, ReplacingMergeTree)
        /// </summary>
        [Output("engine")]
        public Output<string> Engine { get; private set; } = null!;

        /// <summary>
        /// Engine params in case the engine type requires them
        /// </summary>
        [Output("engineParams")]
        public Output<ImmutableArray<string>> EngineParams { get; private set; } = null!;

        /// <summary>
        /// Column Name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Order by columns to use as sorting key
        /// </summary>
        [Output("orderBies")]
        public Output<ImmutableArray<string>> OrderBies { get; private set; } = null!;

        /// <summary>
        /// Partition Key to split data
        /// </summary>
        [Output("partitionBies")]
        public Output<ImmutableArray<Outputs.TablePartitionBy>> PartitionBies { get; private set; } = null!;


        /// <summary>
        /// Create a Table resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Table(string name, TableArgs args, CustomResourceOptions? options = null)
            : base("clickhouse:index/table:Table", name, args ?? new TableArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Table(string name, Input<string> id, TableState? state = null, CustomResourceOptions? options = null)
            : base("clickhouse:index/table:Table", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://storage.googleapis.com/pulumi-shofifi/clickhouse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Table resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Table Get(string name, Input<string> id, TableState? state = null, CustomResourceOptions? options = null)
        {
            return new Table(name, id, state, options);
        }
    }

    public sealed class TableArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Cluster Name, it is required for Replicated or Distributed tables and forbidden in other case
        /// </summary>
        [Input("cluster")]
        public Input<string>? Cluster { get; set; }

        [Input("columns")]
        private InputList<Inputs.TableColumnArgs>? _columns;

        /// <summary>
        /// Column
        /// </summary>
        public InputList<Inputs.TableColumnArgs> Columns
        {
            get => _columns ?? (_columns = new InputList<Inputs.TableColumnArgs>());
            set => _columns = value;
        }

        /// <summary>
        /// Database comment, it will be codified in a json along with come metadata information (like cluster name in case of clustering)
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// DB Name where the table will bellow
        /// </summary>
        [Input("database", required: true)]
        public Input<string> Database { get; set; } = null!;

        /// <summary>
        /// Table engine type (Supported types so far: Distributed, ReplicatedReplacingMergeTree, ReplacingMergeTree)
        /// </summary>
        [Input("engine", required: true)]
        public Input<string> Engine { get; set; } = null!;

        [Input("engineParams", required: true)]
        private InputList<string>? _engineParams;

        /// <summary>
        /// Engine params in case the engine type requires them
        /// </summary>
        public InputList<string> EngineParams
        {
            get => _engineParams ?? (_engineParams = new InputList<string>());
            set => _engineParams = value;
        }

        /// <summary>
        /// Column Name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("orderBies")]
        private InputList<string>? _orderBies;

        /// <summary>
        /// Order by columns to use as sorting key
        /// </summary>
        public InputList<string> OrderBies
        {
            get => _orderBies ?? (_orderBies = new InputList<string>());
            set => _orderBies = value;
        }

        [Input("partitionBies")]
        private InputList<Inputs.TablePartitionByArgs>? _partitionBies;

        /// <summary>
        /// Partition Key to split data
        /// </summary>
        public InputList<Inputs.TablePartitionByArgs> PartitionBies
        {
            get => _partitionBies ?? (_partitionBies = new InputList<Inputs.TablePartitionByArgs>());
            set => _partitionBies = value;
        }

        public TableArgs()
        {
        }
        public static new TableArgs Empty => new TableArgs();
    }

    public sealed class TableState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Cluster Name, it is required for Replicated or Distributed tables and forbidden in other case
        /// </summary>
        [Input("cluster")]
        public Input<string>? Cluster { get; set; }

        [Input("columns")]
        private InputList<Inputs.TableColumnGetArgs>? _columns;

        /// <summary>
        /// Column
        /// </summary>
        public InputList<Inputs.TableColumnGetArgs> Columns
        {
            get => _columns ?? (_columns = new InputList<Inputs.TableColumnGetArgs>());
            set => _columns = value;
        }

        /// <summary>
        /// Database comment, it will be codified in a json along with come metadata information (like cluster name in case of clustering)
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// DB Name where the table will bellow
        /// </summary>
        [Input("database")]
        public Input<string>? Database { get; set; }

        /// <summary>
        /// Table engine type (Supported types so far: Distributed, ReplicatedReplacingMergeTree, ReplacingMergeTree)
        /// </summary>
        [Input("engine")]
        public Input<string>? Engine { get; set; }

        [Input("engineParams")]
        private InputList<string>? _engineParams;

        /// <summary>
        /// Engine params in case the engine type requires them
        /// </summary>
        public InputList<string> EngineParams
        {
            get => _engineParams ?? (_engineParams = new InputList<string>());
            set => _engineParams = value;
        }

        /// <summary>
        /// Column Name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("orderBies")]
        private InputList<string>? _orderBies;

        /// <summary>
        /// Order by columns to use as sorting key
        /// </summary>
        public InputList<string> OrderBies
        {
            get => _orderBies ?? (_orderBies = new InputList<string>());
            set => _orderBies = value;
        }

        [Input("partitionBies")]
        private InputList<Inputs.TablePartitionByGetArgs>? _partitionBies;

        /// <summary>
        /// Partition Key to split data
        /// </summary>
        public InputList<Inputs.TablePartitionByGetArgs> PartitionBies
        {
            get => _partitionBies ?? (_partitionBies = new InputList<Inputs.TablePartitionByGetArgs>());
            set => _partitionBies = value;
        }

        public TableState()
        {
        }
        public static new TableState Empty => new TableState();
    }
}
