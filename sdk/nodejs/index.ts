// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { DbArgs, DbState } from "./db";
export type Db = import("./db").Db;
export const Db: typeof import("./db").Db = null as any;
utilities.lazyLoad(exports, ["Db"], () => require("./db"));

export { GetDbsResult } from "./getDbs";
export const getDbs: typeof import("./getDbs").getDbs = null as any;
export const getDbsOutput: typeof import("./getDbs").getDbsOutput = null as any;
utilities.lazyLoad(exports, ["getDbs","getDbsOutput"], () => require("./getDbs"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RoleArgs, RoleState } from "./role";
export type Role = import("./role").Role;
export const Role: typeof import("./role").Role = null as any;
utilities.lazyLoad(exports, ["Role"], () => require("./role"));

export { TableArgs, TableState } from "./table";
export type Table = import("./table").Table;
export const Table: typeof import("./table").Table = null as any;
utilities.lazyLoad(exports, ["Table"], () => require("./table"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));

export { ViewArgs, ViewState } from "./view";
export type View = import("./view").View;
export const View: typeof import("./view").View = null as any;
utilities.lazyLoad(exports, ["View"], () => require("./view"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "clickhouse:index/db:Db":
                return new Db(name, <any>undefined, { urn })
            case "clickhouse:index/role:Role":
                return new Role(name, <any>undefined, { urn })
            case "clickhouse:index/table:Table":
                return new Table(name, <any>undefined, { urn })
            case "clickhouse:index/user:User":
                return new User(name, <any>undefined, { urn })
            case "clickhouse:index/view:View":
                return new View(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("clickhouse", "index/db", _module)
pulumi.runtime.registerResourceModule("clickhouse", "index/role", _module)
pulumi.runtime.registerResourceModule("clickhouse", "index/table", _module)
pulumi.runtime.registerResourceModule("clickhouse", "index/user", _module)
pulumi.runtime.registerResourceModule("clickhouse", "index/view", _module)
pulumi.runtime.registerResourcePackage("clickhouse", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:clickhouse") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
